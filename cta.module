<?php

function cta_menu(){
	$items = array();

	$items['admin/structure/cta'] = array(
      'title' => 'Call to Action Buttons',
      'description' => 'Configure the cta module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cta_admin_settings'),
      'access arguments' => array('administer site configuration'),
	);

	$items['admin/structure/cta/%/%/delete'] = array(
	  'title' => 'cta',
	  'page callback' => 'cta_delete_item',
	  'page arguments' => array(3,4),
	  'access arguments' => array('administer site configuration'),
	);

	$items['admin/structure/cta/%/%/edit'] = array(
	  'title' => 'cta',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cta_admin_settings',3,4),
	  'access arguments' => array('administer site configuration'),
	);

	return $items;
}

function cta_delete_item($token,$key){
	$default_values = variable_get('cta', array());
	unset($default_values[$token][$key]);
	foreach($default_values as $token => $ctas){
		if (count($ctas) < 1) {
			unset($default_values[$token]);
		}
	}
	variable_set('cta',$default_values);
	drupal_flush_all_caches();
	drupal_goto('admin/structure/cta');
}

function cta_admin_settings($form,$form_state,$edittoken = NULL,$editkey = NULL){
	if ( module_exists('libraries') && ($library = libraries_detect('fontawesome')) && !empty($library['installed'])) {
  	$hide_icons = FALSE;
  	$version = $library['version'];
  	if ( file_exists(DRUPAL_ROOT . '/sites/all/libraries/fontawesome/less/icons.less') ){
      $icon_list = TRUE;
      $iconclasses=array();
      $faless = file_get_contents(DRUPAL_ROOT . '/sites/all/libraries/fontawesome/less/icons.less');
      preg_match_all('/\.icon-.*?:before\s*?\{\s*?content/',$faless,$matches);
      foreach($matches[0] as $match) {
          $match = explode(':',$match);
          $icon_s = t(preg_replace('/^\.icon-/','',$match[0]));
          $iconclasses[$icon_s] = $icon_s;
      }
      uksort($iconclasses, "_cta_cmp");
      array_unshift($iconclasses, "none");
    } else {
    	$icon_list = FALSE;
    }
	} else {
		$hide_icons = TRUE;
		$icon_list = FALSE;
	}

	$options = array('attributes'=>array('target'=>'_blank'));
	$ctavars = array('edit'=>FALSE,'token'=>'','path'=>'','title'=>'','weight'=>'0','icon'=>'');

	$default_values = variable_get('cta', array());
	uksort($default_values,"_cta_cmp");
  	$form = array();

	if ($hide_icons) {
		$tb_header = array("Path","Title","Weight","Edit","Delete");
		$icon_message = '<em>' . t('FontAwesome Icons require the ' . l(t('libraries'),'https://drupal.org/project/libraries',$options) . ' module and the ' . l(t('FontAwesome'),'https://drupal.org/project/fontawesome',$options) . ' library.') . '</em>';
	} else {
		$tb_header = array("Path","Title","Weight","Icon","Edit","Delete");
		$icon_message = t('FontAwesome library detected. Version: ') . $version;
	}

	foreach($default_values as $token => $ctas){
		uasort($ctas, "_cta_cmp_weight");
		$table = array();
		foreach($ctas as $key => $cta){
			$validated = valid_url($cta['path']);
      $external =  url_is_external($cta['path']);
      if ($validated && $external){
        $path = $cta['path'];
      } elseif ($validated) {
        $path = "/" . $cta['path'];
      } elseif ($cta['path'] === '<front>') {
        $path = "/";
      } else {
        $path = '';
      }

			if ($hide_icons) {
				$table[] = array($path,$cta['title'],$cta['weight'],l('edit',"admin/structure/cta/$token/$key/edit"),l('delete',"admin/structure/cta/$token/$key/delete",array('attributes'=>array("class"=>array("delete")))));
			} else {
				if ($cta['icon'] === '0'){
          $icon = "";
        } else {
          $icon = $cta['icon'];
        }
        $table[] = array($path,$cta['title'],$cta['weight'],$icon,l('edit',"admin/structure/cta/$token/$key/edit"),l('delete',"admin/structure/cta/$token/$key/delete",array('attributes'=>array("class"=>array("delete")))));
			}
			if (($edittoken == $token) && ($editkey == $key)){
				$ctavars['edit'] = TRUE;
				$ctavars['token'] = $token;
				$ctavars['path'] = $cta['path'];
				$ctavars['title'] = $cta['title'];
				$ctavars['weight'] = $cta['weight'];
				$ctavars['icon'] = $cta['icon'];
				$ctavars['key'] = $key;
			}
		}
		$variables = array(
			'header' => $tb_header,
			'rows' => $table,
			'caption' => '<p>&nbsp;</p><h3><strong>Button Group: '. $token . '</strong><br>Use by inserting [cta|' . $token . '] into content.</h3>',
		);
		if (!$ctavars['edit']){
	  	$form['info-' . $token] = array(
				'#markup' => theme("table",$variables),
			);
	  }
	}

	if ($ctavars['edit']){
		$form['spacer'] = array(
			'#markup' => '<p>&nbsp;</p><h1>'.t('Edit Button').'</h1>',
		);
	} else {
		$form['spacer'] = array(
			'#markup' => '<p>&nbsp;</p><h1>'.t('Add New Button').'</h1>',
		);
	}

	$form['token'] = array(
		'#type' => 'textfield',
		'#title' => "Button Group",
		'#required' => TRUE,
		'#default_value' => $ctavars['token'],
		'#disabled' => $ctavars['edit'],
	);

	$form['path'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Path'),
	  '#required' => TRUE,
		'#default_value' => $ctavars['path'],
	);

	$form['title'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Title'),
	  '#required' => TRUE,
		'#default_value' => $ctavars['title'],
	);

	$form['weight'] = array(
		'#type' => 'weight',
		'#title' => t('Weight'),
		'#default_value' => $ctavars['weight'],
	);

	if ($icon_list){
    $form['icon'] = array(
      '#type' => 'select',
      '#title' => t('FontAwesome Icon'),
      '#options'=> $iconclasses,
      '#multiple'=> FALSE,
      '#required' => FALSE,
      '#field_prefix' => t('icon-'),
      '#description' => '<strong>' . t('Optional:') . '</strong> ' . t('Enter the icon name as seen on the ') . l(t('FontAwesome Cheatsheet'),'http://fortawesome.github.io/Font-Awesome/cheatsheet/',$options) . '<br>' . $icon_message,
      '#disabled' => $hide_icons,
      '#default_value' => $ctavars['icon'],
    );
  } else {
    $form['icon'] = array(
      '#type' => 'textfield',
      '#title' => t('FontAwesome Icon'),
      '#required' => FALSE,
      '#field_prefix' => t('icon-'),
      '#description' => '<strong>' . t('Optional:') . '</strong> ' . t('Enter the icon name as seen on the ') . l(t('FontAwesome Cheatsheet'),'http://fortawesome.github.io/Font-Awesome/cheatsheet/',$options) . '<br>' . $icon_message,
      '#disabled' => $hide_icons,
      '#default_value' => $ctavars['icon'],
    );
  }

	if ($ctavars['edit']){
		$form['key'] = array('#type'=>'hidden','#value'=>$ctavars['key']);
		$form['submit'] = array('#type' => 'submit', '#value' => t('Edit'));
	} else {
		$form['submit'] = array('#type' => 'submit', '#value' => t('Add'));
  }
  	return $form;

}

function cta_admin_settings_validate($form, &$form_state) {
  $validated = preg_match('/^[a-zA-Z0-9-_]+$/', t($form_state['values']['token']));
  if (!$validated){
    form_set_error('token','Tokens may contain only letters, numbers, dashes and hyphens with no spaces or other special characters.  Please supply a valid token.');
  }
  $validated = (valid_url($form_state['values']['path']) || $form_state['values']['path'] === '<front>');
  if (!$validated) {
    form_set_error('path', 'Please supply a valid link.');
  }
  $validated = (preg_match('/^[a-z-]+$/', t($form_state['values']['icon'])) || t($form_state['values']['icon']) === "0");
  if (!$validated) {
    form_set_error('icon', 'Icon names are all lowercase letters with dashes.  Please supply a valid icon name.');
  }
}

function cta_admin_settings_submit($form, &$form_state) {
	$default_values = variable_get('cta', array());
	if ($form_state['clicked_button']['#value'] !== 'Edit'){
		$default_values[$form['token']['#value']][time()] = array('path'=>$form['path']['#value'],'title'=>$form['title']['#value'],'weight'=>$form['weight']['#value'],'icon'=>$form['icon']['#value']);
	} else {
		$default_values[$form['token']['#value']][$form['key']['#value']] = array('path'=>$form['path']['#value'],'title'=>$form['title']['#value'],'weight'=>$form['weight']['#value'],'icon'=>$form['icon']['#value']);
	}
	variable_set('cta',$default_values);
	drupal_flush_all_caches();
	drupal_goto('admin/structure/cta');
}

function cta_init(){
	drupal_add_css(drupal_get_path('module', 'cta') . '/cta.css');
	drupal_add_js(drupal_get_path('module', 'cta') . '/cta.js');
}


function cta_filter_info() {
  $filters['cta'] = array(
    'title' => t('Call To Action'),
    'description' => t(''),
    'prepare callback' => '_cta_filter_cta_prepare',
    'process callback' => '_cta_filter_cta_process',
    'tips callback' => '_cta_filter_cta_tips',
  );
  return $filters;
}

function _cta_filter_cta_prepare($text, $filter, $format, $langcode, $cache, $cache_id){
	return $text;
}

function _cta_filter_cta_process($text, $filter, $format, $langcode, $cache, $cache_id){
	preg_match_all('/\[cta\|([a-z-]+)\]/', $text, $matches);
	$x = 0;
	if(count($matches[0])){
		while($x <= count($matches[0])-1){
			$text = str_replace($matches[0][$x],cta_get_btns($matches[1][$x]),$text);
			$x++;
		}
	}
	return $text;
}

function _cta_filter_cta_tips($filter, $format, $long){
	$videos = variable_get('cta', array());
	$items = array();
	foreach($videos as $token => $video){
		$items[] = "[cta|$token]";
	}
	$html = "<h2>Call To Action Filter Tips</h2><p>Use the following to add Calls-to-Action to the site:</p>";
	$html .= theme('item-list',$items);
	return $html;
}

function cta_get_btns($match){

	$ctas = variable_get('cta', array());
	$items = array();
	if(isset($ctas[$match])){
		uasort($ctas[$match], "_cta_cmp_weight");
		foreach($ctas[$match] as $cta){
			$validated = valid_url($cta['path']);
      $external =  url_is_external($cta['path']);
      if ($validated && $external){
        $path = $cta['path'];
      } elseif ($validated) {
        $path = "/" . $cta['path'];
      } elseif ($cta['path'] === '<front>') {
        $path = "/";
      } else {
        $path = '';
      }

			if(strlen($cta['icon']) > 0){
				$icon = '<i class="icon-'.$cta['icon'].'"></i> ';
			} else {
				$icon = '';
			}

			$items[] = '<a href="'.$path.'">'.$icon.$cta['title'].'</a>';
		}
	}
	return theme('item_list',array('items' => $items, 'attributes' => array('class' => 'cta clearfix ' . $match)));

}

function _cta_cmp_weight($a, $b)
{
    if ($a['weight'] < $b['weight']){
      return -1;
    } elseif ($a['weight'] > $b['weight']){
      return 1;
    } else {
      return 0;
    }
}
function _cta_cmp($a, $b)
{
    return strcmp($a, $b);
}
